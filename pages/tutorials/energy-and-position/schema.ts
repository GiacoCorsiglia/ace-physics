import * as f from "@/schema/fields";
import { tutorialSchema } from "@/schema/tutorial";

export default tutorialSchema({
  pages: [
    "energyBasis",
    "energyHistograms",
    "positionRepresentationA",
    "positionRepresentationB",
    "comparingRepresentations",
    "connectingBases",
  ],
  pretest: {
    probUpZEqual: f.chooseOne(["true", "false"]),
    probDownZEqual: f.chooseOne(["true", "false"]),
    probUpXEqual: f.chooseOne(["true", "false"]),
    howToNormalizeWaveFunction: f.string(),
  },
  sections: [
    "energyBasisIntro",
    "psiAMeasurements",
    "isPsiAEnergyEigenstate",
    "psiAEnergyExpectation",
    "columnE2",
    "columnPsiA",
    "dotDotDotMeaning",

    "energyHistogramsIntro",
    "interpretVerticalAxis",
    "normalizationMeaning",
    "psiBDifference",
    "psiBMeasurements",
    "psiBHistogram",
    "psiBDifferentFromPsiA",

    "positionRepresentationAIntro",
    "infoFromGraph",
    "probDensA",
    "AProbLoc",
    "interpretProbDens",
    "psiAExpVal",
    "psiAPosEigenstate",

    "positionRepresentationBIntro",
    "probDensB",
    "LikelyLocation",
    "compareGraphs",
    "psiBExpVal",
    "psiBDifferentFromPsiAReflect",

    "comparingRepresentationsIntro",
    "sameStateDifRep",
    "inferFromRep",
    "oneRepBetter",

    "connectingBasesIntro",
    "ketInEnergyBasisFunc",
    "posQuestionsEnergyBasis",
    "toThinkAbout",
  ],
  responses: {
    psiAMeasurements: f.string(),
    isPsiAEnergyEigenstate: f.chooseOne(["yes", "no"]),
    isPsiAEnergyEigenstateExplain: f.string(),
    psiAEnergyExpectation: f.string(),
    columnE2: f.array(f.string()),
    columnPsiA: f.array(f.string()),
    dotDotDotMeaning: f.string(),

    interpretVerticalAxis: f.string(),
    normalizationMeaning: f.string(),
    psiBDifference: f.string(),
    psiBMeasurements: f.string(),
    psiBvsPsiAExpectation: f.chooseOne(["same", "different"]),
    psiBBarHeights: f.tuple(f.number(), f.number(), f.number(), f.number()),
    psiBDifferentFromPsiA: f.chooseOne(["same", "different"]),
    psiBDistinguishableFromPsiA: f.string(),

    infoFromGraph: f.string(),
    MostProbLoc: f.string(),
    LeastProbLoc: f.string(),
    studentInterpretationsProbDens: f.string(),
    correctInterpretationProbDens: f.string(),
    psiAExpVal: f.chooseOne(["left", "center", "right"]),
    psiAExpValExplain: f.string(),
    psiAPosEigenstate: f.chooseOne([
      "position eigenstate",
      "not position eigenstate",
    ]),
    psiAPosEigenstateExplain: f.string(),

    probabilityDensity: f.string(),
    mostLikelyLocation: f.string(),
    leastLikelyLocation: f.string(),
    compareGraphs: f.string(),
    psiBExpVal: f.chooseOne(["left", "center", "right"]),
    psiBExpValExplain: f.string(),
    psiBDifferentFromPsiAReflect: f.string(),

    sameStateDifRep: f.string(),
    inferFromHistRep: f.string(),
    inferFromFuncRep: f.string(),
    oneRepBetter: f.string(),

    ketInEnergyBasisFunc: f.string(),
    posQuestionsEnergyBasis: f.string(),
    toThinkAbout: f.string(),
  },
  hints: [
    "isPsiAEnergyEigenstate",
    "psiBHistogramTechDifficulties",
    "sameStateDifRep",
  ],
});
