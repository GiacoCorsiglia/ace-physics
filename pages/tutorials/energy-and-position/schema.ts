import * as s from "@/schema/tutorial";

export default s.tutorial({
  pages: {
    energyBasis: s.page(),
    energyHistograms: s.page(),
    positionRepresentationA: s.page(),
    positionRepresentationB: s.page(),
    comparingRepresentations: s.page(),
    connectingBases: s.page(),
  },
  pretest: {
    probUpZEqual: s.chooseOne(["true", "false"]),
    probDownZEqual: s.chooseOne(["true", "false"]),
    probUpXEqual: s.chooseOne(["true", "false"]),
    howToNormalizeWaveFunction: s.string(),
  },
  sections: {
    energyBasisIntro: s.section(),
    psiAMeasurements: s.section(),
    isPsiAEnergyEigenstate: s.section(),
    psiAEnergyExpectation: s.section(),
    columnE2: s.section(),
    columnPsiA: s.section(),
    dotDotDotMeaning: s.section(),

    energyHistogramsIntro: s.section(),
    interpretVerticalAxis: s.section(),
    normalizationMeaning: s.section(),
    psiBDifference: s.section(),
    psiBMeasurements: s.section(),
    psiBvsPsiAExpectationIncorrect: s.section(),
    psiBHistogram: s.section(),
    psiBHistogramCorrect: s.section(),
    psiBHistogramIncorrect: s.section(),
    psiBDifferentFromPsiA: s.section(),

    positionRepresentationAIntro: s.section(),
    infoFromGraph: s.section(),
    probDensA: s.section(),
    AProbLoc: s.section(),
    interpretProbDens: s.section(),
    psiAExpVal: s.section(),
    psiAPosEigenstate: s.section(),
    whatDoesAPosEigenstateLookLike: s.section(),
    whatDoesAPosEigenstateLookLikeCorrect: s.section(),
    whatDoesAPosEigenstateLookLikeIncorrect: s.section(),
    psiAPosEigenstateCorrect: s.section(),

    positionRepresentationBIntro: s.section(),
    probDensB: s.section(),
    LikelyLocation: s.section(),
    compareGraphs: s.section(),
    psiBExpVal: s.section(),
    psiBDifferentFromPsiAReflect: s.section(),
    psiBDifferentFromPsiAModifiedIncorrect: s.section(),
    psiBDifferentFromPsiAModifiedCorrect: s.section(),

    comparingRepresentationsIntro: s.section(),
    sameStateDifRep: s.section(),
    inferFromRep: s.section(),
    oneRepBetter: s.section(),

    connectingBasesIntro: s.section(),
    ketInEnergyBasisFunc: s.section(),
    posQuestionsEnergyBasis: s.section(),
    toThinkAbout: s.section(),
  },
  responses: {
    psiAMeasurements: s.string(),
    isPsiAEnergyEigenstate: s.chooseOne(["yes", "no"]),
    isPsiAEnergyEigenstateExplain: s.string(),
    psiAEnergyExpectation: s.string(),
    columnE2: s.array(s.string()),
    columnPsiA: s.array(s.string()),
    dotDotDotMeaning: s.string(),

    interpretVerticalAxis: s.string(),
    normalizationMeaning: s.string(),
    psiBDifference: s.string(),
    psiBMeasurements: s.string(),
    psiBvsPsiAExpectation: s.chooseOne(["same", "different"]),
    psiBBarHeights: s.tuple(s.number(), s.number(), s.number(), s.number()),
    psiBDifferentFromPsiA: s.chooseOne(["same", "different"]),
    psiBDistinguishableFromPsiA: s.string(),

    infoFromGraph: s.string(),
    studentInterpretationsProbDens: s.string(),
    correctInterpretationProbDens: s.string(),
    psiAExpVal: s.chooseOne(["left", "center", "right"]),
    psiAExpValExplain: s.string(),
    psiAPosEigenstate: s.chooseOne([
      "position eigenstate",
      "not position eigenstate",
    ]),
    psiAPosEigenstateExplain: s.string(),
    whatDoesAPosEigenstateLookLike: s.chooseOne([
      "any f(x)",
      "bump",
      "delta function",
    ]),

    probabilityDensity: s.string(),
    mostLikelyLocation: s.string(),
    leastLikelyLocation: s.string(),
    compareGraphs: s.string(),
    psiBExpVal: s.chooseOne(["left", "center", "right"]),
    psiBExpValExplain: s.string(),
    psiBDifferentFromPsiAModified: s.chooseOne(["modified", "unmodified"]),
    psiBDifferentFromPsiAReflect: s.string(),
    sameStateDifRep: s.string(),
    inferFromHistRep: s.string(),
    inferFromFuncRep: s.string(),
    oneRepBetter: s.string(),

    ketInEnergyBasisFunc: s.string(),
    posQuestionsEnergyBasis: s.string(),
    toThinkAbout: s.string(),
  },
  hints: {
    isPsiAEnergyEigenstate: s.hint(),
    isPsiAEnergyEigenstate2: s.hint(),
    psiBHistogramTechDifficulties: s.hint(),
    psiBDifferentFromPsiA: s.hint(),
    positionRepresentationAIntro: s.hint(),
    sameStateDifRep: s.hint(),
  },
});
