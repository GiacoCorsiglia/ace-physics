@use "colors";
@use "borders";
@use "spacing";

$text-width: spacing.$space-4000;
// It turns out calc() doesn't behave well in media queries (at least not in
// Chrome) so we just hardcode these as pixel values assuming 1rem = 16px.
// $minContentWidth: spacing.$space-75 + spacing.$space-4000 + spacing.$space-75;
$min-content-width: 664px;
// $maxContentWidth: 1px + spacing.$space-400} + $text-width + spacing.$space-400 + 1px;
$max-content-width: 770px;

:not(.contentWidth) > .contentWidth {
  margin-left: auto;
  margin-right: auto;

  @media (min-width: $max-content-width) {
    box-sizing: content-box;
    max-width: $text-width;
    padding-left: spacing.$space-400;
    padding-right: spacing.$space-400;

    --callout-horizontal-margins: #{- spacing.$space-150};
    --section-border-margins: #{- spacing.$space-400};
  }

  @media (min-width: $min-content-width) and (max-width: $max-content-width - 1px) {
    padding-left: calc((100vw - #{$text-width}) / 2);
    padding-right: calc((100vw - #{$text-width}) / 2);
  }

  @media (max-width: $min-content-width - 1px) {
    padding-left: spacing.$space-75;
    padding-right: spacing.$space-75;
  }
}

:not(.content) > .content {
  padding-top: spacing.$space-300;
  padding-bottom: spacing.$space-300;

  background: colors.$neutral-100;
  border-style: solid;
  border-color: colors.$neutral-300;
  box-shadow: 0px 2px 8px colors.alpha(colors.$neutral-900, 0.05),
    0px 4px 30px colors.alpha(colors.$neutral-900, 0.05);

  @media (min-width: $max-content-width) {
    border-width: 1px;
    border-radius: borders.$radius-large;
  }

  @media (min-width: $min-content-width) and (max-width: $max-content-width - 1px) {
    border-width: 1px 0;
  }

  @media (max-width: $min-content-width - 1px) {
    border-width: 1px 0;
  }
}

.sectionGroup {
  .section + .section {
    $spacing: spacing.$space-300;

    margin-top: $spacing;

    &::before {
      // Use a pseudo element for the border-top to break out of the boundaries.
      content: "";
      display: block;
      height: 1px;
      background: colors.$neutral-300;
      margin-left: var(--section-border-margins);
      margin-right: var(--section-border-margins);
      margin-bottom: $spacing; // This is basically `padding-top`.
    }
  }
}

.contentMarginTop {
  margin-top: spacing.$space-300;
}

.contentMarginTopLarge {
  margin-top: calc(#{spacing.$space-300} + 10vh);
}

.vertical100 > * + * {
  margin-top: spacing.$space-100;
}

.vertical300 > * + * {
  margin-top: spacing.$space-300;
}

.vertical {
  > .verticalSpaceAfter100 + * {
    margin-top: spacing.$space-100;
  }
}

.horizontal {
  display: flex;
  // Defaults:
  align-items: center;
  justify-content: flex-start;

  > * + * {
    margin-left: spacing.$space-100;
  }
}

.alignStart {
  align-items: flex-start;
}
.alignEnd {
  align-items: flex-end;
}
.alignStretch {
  align-items: center;
}

.justifyEnd {
  justify-content: flex-end;
}
.justifyCenter {
  justify-content: center;
}
.justifyStretch {
  justify-content: stretch;

  > * {
    flex-grow: 1;
  }
}

.columns {
  display: grid;

  @media (min-width: $min-content-width) {
    grid-template-columns: 1fr 1fr;
    column-gap: spacing.$space-150;
  }

  @media (max-width: $min-content-width - 1px) {
    grid-template-columns: 1fr;
    row-gap: spacing.$space-100;
  }
}

.spacerInlineBlock {
  display: inline-block;
}
.spacerBlock {
  display: block;
}
.spacer25 {
  width: spacing.$space-25;
}
.spacer50 {
  width: spacing.$space-50;
}
.spacer75 {
  width: spacing.$space-75;
}
.spacer100 {
  width: spacing.$space-100;
}
